# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: fluoro.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, Optional

import betterproto
import grpclib

from mentice.mentice.common import v1


class Plane(betterproto.Enum):
    PLANE_UNDEFINED = 0
    MAIN = 1
    LATERAL = 2


class Mode(betterproto.Enum):
    MODE_UNDEFINED = 0
    XRAY = 1
    CINE = 2


@dataclass
class GetFrameStreamRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)


@dataclass
class GetFrameStreamResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)
    frame: "Frame" = betterproto.message_field(2)


@dataclass
class SetXrayPedalRequest(betterproto.Message):
    down: bool = betterproto.bool_field(1)


@dataclass
class SetXrayPedalResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)


@dataclass
class GetXrayPedalRequest(betterproto.Message):
    pass


@dataclass
class GetXrayPedalResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)
    down: bool = betterproto.bool_field(2)


@dataclass
class SetCinePedalRequest(betterproto.Message):
    down: bool = betterproto.bool_field(1)


@dataclass
class SetCinePedalResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)


@dataclass
class GetCinePedalRequest(betterproto.Message):
    pass


@dataclass
class GetCinePedalResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)
    down: bool = betterproto.bool_field(2)


@dataclass
class SetShuttersRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)
    horizontal: float = betterproto.float_field(2)
    vertical: float = betterproto.float_field(3)


@dataclass
class SetShuttersResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)


@dataclass
class GetShuttersRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)


@dataclass
class GetShuttersResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)
    horizontal: float = betterproto.float_field(2)
    vertical: float = betterproto.float_field(3)


@dataclass
class SetCollimatorsRequest(betterproto.Message):
    """There is usually two collimators per carm"""

    plane: "Plane" = betterproto.enum_field(1)
    left: "Collimator" = betterproto.message_field(2)
    right: "Collimator" = betterproto.message_field(3)


@dataclass
class SetCollimatorsResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)


@dataclass
class GetCollimatorsRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)


@dataclass
class GetCollimatorsResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)
    left: "Collimator" = betterproto.message_field(2)
    right: "Collimator" = betterproto.message_field(3)


@dataclass
class SetFrameRateRequest(betterproto.Message):
    mode: "Mode" = betterproto.enum_field(1)
    frame_rate: int = betterproto.int32_field(2)


@dataclass
class SetFrameRateResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)


@dataclass
class GetFrameRateRequest(betterproto.Message):
    mode: "Mode" = betterproto.enum_field(1)


@dataclass
class GetFrameRateResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)
    frame_rate: int = betterproto.int32_field(2)


@dataclass
class GetRadiationRequest(betterproto.Message):
    pass


@dataclass
class GetRadiationResponse(betterproto.Message):
    header: v1.Header = betterproto.message_field(1)
    esd: float = betterproto.float_field(2)
    irp_ak: float = betterproto.float_field(3)
    kap: float = betterproto.float_field(4)
    psd: float = betterproto.float_field(5)
    irp_ak_accum: float = betterproto.float_field(6)
    kap_accum: float = betterproto.float_field(7)


@dataclass
class Frame(betterproto.Message):
    image: v1.Image = betterproto.message_field(1)
    timestamp: float = betterproto.float_field(2)
    recording: bool = betterproto.bool_field(3)
    recorded_frame_count: int = betterproto.int32_field(4)
    dye_mass: float = betterproto.float_field(5)
    noise: float = betterproto.float_field(6)


@dataclass
class Collimator(betterproto.Message):
    translation: float = betterproto.float_field(1)
    rotation: float = betterproto.float_field(2)


class FluoroStub(betterproto.ServiceStub):
    async def get_frame_stream(
        self, *, plane: "Plane" = 0
    ) -> AsyncGenerator[GetFrameStreamResponse, None]:
        request = GetFrameStreamRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.fluoro.v1.Fluoro/GetFrameStream",
            request,
            GetFrameStreamResponse,
        ):
            yield response

    async def set_xray_pedal(self, *, down: bool = False) -> SetXrayPedalResponse:
        request = SetXrayPedalRequest()
        request.down = down

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/SetXrayPedal",
            request,
            SetXrayPedalResponse,
        )

    async def get_xray_pedal(self) -> GetXrayPedalResponse:
        request = GetXrayPedalRequest()

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/GetXrayPedal",
            request,
            GetXrayPedalResponse,
        )

    async def get_xray_pedal_stream(self) -> AsyncGenerator[GetXrayPedalResponse, None]:
        request = GetXrayPedalRequest()

        async for response in self._unary_stream(
            "/mentice.fluoro.v1.Fluoro/GetXrayPedalStream",
            request,
            GetXrayPedalResponse,
        ):
            yield response

    async def set_cine_pedal(self, *, down: bool = False) -> SetCinePedalResponse:
        request = SetCinePedalRequest()
        request.down = down

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/SetCinePedal",
            request,
            SetCinePedalResponse,
        )

    async def get_cine_pedal(self) -> GetCinePedalResponse:
        request = GetCinePedalRequest()

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/GetCinePedal",
            request,
            GetCinePedalResponse,
        )

    async def get_cine_pedal_stream(self) -> AsyncGenerator[GetCinePedalResponse, None]:
        request = GetCinePedalRequest()

        async for response in self._unary_stream(
            "/mentice.fluoro.v1.Fluoro/GetCinePedalStream",
            request,
            GetCinePedalResponse,
        ):
            yield response

    async def set_shutters(
        self, *, plane: "Plane" = 0, horizontal: float = 0, vertical: float = 0
    ) -> SetShuttersResponse:
        request = SetShuttersRequest()
        request.plane = plane
        request.horizontal = horizontal
        request.vertical = vertical

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/SetShutters",
            request,
            SetShuttersResponse,
        )

    async def get_shutters(self, *, plane: "Plane" = 0) -> GetShuttersResponse:
        request = GetShuttersRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/GetShutters",
            request,
            GetShuttersResponse,
        )

    async def get_shutters_stream(
        self, *, plane: "Plane" = 0
    ) -> AsyncGenerator[GetShuttersResponse, None]:
        request = GetShuttersRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.fluoro.v1.Fluoro/GetShuttersStream",
            request,
            GetShuttersResponse,
        ):
            yield response

    async def set_collimators(
        self,
        *,
        plane: "Plane" = 0,
        left: Optional["Collimator"] = None,
        right: Optional["Collimator"] = None,
    ) -> SetCollimatorsResponse:
        request = SetCollimatorsRequest()
        request.plane = plane
        if left is not None:
            request.left = left
        if right is not None:
            request.right = right

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/SetCollimators",
            request,
            SetCollimatorsResponse,
        )

    async def get_collimators(self, *, plane: "Plane" = 0) -> GetCollimatorsResponse:
        request = GetCollimatorsRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/GetCollimators",
            request,
            GetCollimatorsResponse,
        )

    async def get_collimators_stream(
        self, *, plane: "Plane" = 0
    ) -> AsyncGenerator[GetCollimatorsResponse, None]:
        request = GetCollimatorsRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.fluoro.v1.Fluoro/GetCollimatorsStream",
            request,
            GetCollimatorsResponse,
        ):
            yield response

    async def set_frame_rate(
        self, *, mode: "Mode" = 0, frame_rate: int = 0
    ) -> SetFrameRateResponse:
        request = SetFrameRateRequest()
        request.mode = mode
        request.frame_rate = frame_rate

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/SetFrameRate",
            request,
            SetFrameRateResponse,
        )

    async def get_frame_rate(self, *, mode: "Mode" = 0) -> GetFrameRateResponse:
        request = GetFrameRateRequest()
        request.mode = mode

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/GetFrameRate",
            request,
            GetFrameRateResponse,
        )

    async def get_frame_rate_stream(
        self, *, mode: "Mode" = 0
    ) -> AsyncGenerator[GetFrameRateResponse, None]:
        request = GetFrameRateRequest()
        request.mode = mode

        async for response in self._unary_stream(
            "/mentice.fluoro.v1.Fluoro/GetFrameRateStream",
            request,
            GetFrameRateResponse,
        ):
            yield response

    async def get_radiation(self) -> GetRadiationResponse:
        request = GetRadiationRequest()

        return await self._unary_unary(
            "/mentice.fluoro.v1.Fluoro/GetRadiation",
            request,
            GetRadiationResponse,
        )

    async def get_radiation_stream(self) -> AsyncGenerator[GetRadiationResponse, None]:
        request = GetRadiationRequest()

        async for response in self._unary_stream(
            "/mentice.fluoro.v1.Fluoro/GetRadiationStream",
            request,
            GetRadiationResponse,
        ):
            yield response
