# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: geometry.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, List, Optional

import betterproto
import grpclib

from mentice.mentice.common import v1 as common_v1
from mentice.mentice.fluoro import v1 


@dataclass
class SetTablePositionRequest(betterproto.Message):
    value: common_v1.Vec3 = betterproto.message_field(1)


@dataclass
class SetTablePositionResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class GetTablePositionRequest(betterproto.Message):
    pass


@dataclass
class GetTablePositionResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    value: common_v1.Vec3 = betterproto.message_field(2)


@dataclass
class SetTableRotationRequest(betterproto.Message):
    value: common_v1.Vec3 = betterproto.message_field(1)


@dataclass
class SetTableRotationResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class GetTableRotationRequest(betterproto.Message):
    pass


@dataclass
class GetTableRotationResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    value: common_v1.Vec3 = betterproto.message_field(2)


@dataclass
class SetCarmRotationRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)
    value: common_v1.Vec3 = betterproto.message_field(2)


@dataclass
class SetCarmRotationResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class GetCarmRotationRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)


@dataclass
class GetCarmRotationResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    value: common_v1.Vec3 = betterproto.message_field(2)


@dataclass
class SetDetectorRotationRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)
    value: float = betterproto.float_field(2)


@dataclass
class SetDetectorRotationResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class GetDetectorRotationRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)


@dataclass
class GetDetectorRotationResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    value: float = betterproto.float_field(2)


@dataclass
class SetZoomRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)
    value: float = betterproto.float_field(2)


@dataclass
class SetZoomResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class GetZoomRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)


@dataclass
class GetZoomResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    value: float = betterproto.float_field(2)


@dataclass
class SetSourceOffsetRequest(betterproto.Message):
    offset: float = betterproto.float_field(1)


@dataclass
class SetSourceOffsetResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class GetSourceOffsetRequest(betterproto.Message):
    pass


@dataclass
class GetSourceOffsetResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    offset: float = betterproto.float_field(2)


@dataclass
class SetDetectorOffsetRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)
    offset: float = betterproto.float_field(2)


@dataclass
class SetDetectorOffsetResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class GetDetectorOffsetRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)


@dataclass
class GetDetectorOffsetResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    offset: float = betterproto.float_field(2)


@dataclass
class GetTransformsRequest(betterproto.Message):
    plane: v1.Plane = betterproto.enum_field(1)


@dataclass
class GetTransformsResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)
    table: common_v1.Mat4x4f = betterproto.message_field(2)
    model_view: common_v1.Mat4x4f = betterproto.message_field(3)
    projection: common_v1.Mat4x4f = betterproto.message_field(4)


@dataclass
class Set3dRATrajectoryRequest(betterproto.Message):
    positions: List["Position3dRA"] = betterproto.message_field(1)


@dataclass
class Set3dRATrajectoryResponse(betterproto.Message):
    header: common_v1.Header = betterproto.message_field(1)


@dataclass
class Position3dRA(betterproto.Message):
    carm_rotation: common_v1.Vec3 = betterproto.message_field(1)


class GeometryStub(betterproto.ServiceStub):
    async def set_table_position(
        self, *, value: Optional[common_v1.Vec3] = None
    ) -> SetTablePositionResponse:
        request = SetTablePositionRequest()
        if value is not None:
            request.value = value

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/SetTablePosition",
            request,
            SetTablePositionResponse,
        )

    async def get_table_position(self) -> GetTablePositionResponse:
        request = GetTablePositionRequest()

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetTablePosition",
            request,
            GetTablePositionResponse,
        )

    async def get_table_position_stream(
        self,
    ) -> AsyncGenerator[GetTablePositionResponse, None]:
        request = GetTablePositionRequest()

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetTablePositionStream",
            request,
            GetTablePositionResponse,
        ):
            yield response

    async def set_table_rotation(
        self, *, value: Optional[common_v1.Vec3] = None
    ) -> SetTableRotationResponse:
        request = SetTableRotationRequest()
        if value is not None:
            request.value = value

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/SetTableRotation",
            request,
            SetTableRotationResponse,
        )

    async def get_table_rotation(self) -> GetTableRotationResponse:
        request = GetTableRotationRequest()

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetTableRotation",
            request,
            GetTableRotationResponse,
        )

    async def get_table_rotation_stream(
        self,
    ) -> AsyncGenerator[GetTableRotationResponse, None]:
        request = GetTableRotationRequest()

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetTableRotationStream",
            request,
            GetTableRotationResponse,
        ):
            yield response

    async def set_carm_rotation(
        self, *, plane: v1.Plane = 0, value: Optional[common_v1.Vec3] = None
    ) -> SetCarmRotationResponse:
        request = SetCarmRotationRequest()
        request.plane = plane
        if value is not None:
            request.value = value

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/SetCarmRotation",
            request,
            SetCarmRotationResponse,
        )

    async def get_carm_rotation(
        self, *, plane: v1.Plane = 0
    ) -> GetCarmRotationResponse:
        request = GetCarmRotationRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetCarmRotation",
            request,
            GetCarmRotationResponse,
        )

    async def get_carm_rotation_stream(
        self, *, plane: v1.Plane = 0
    ) -> AsyncGenerator[GetCarmRotationResponse, None]:
        request = GetCarmRotationRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetCarmRotationStream",
            request,
            GetCarmRotationResponse,
        ):
            yield response

    async def set_detector_rotation(
        self, *, plane: v1.Plane = 0, value: float = 0
    ) -> SetDetectorRotationResponse:
        request = SetDetectorRotationRequest()
        request.plane = plane
        request.value = value

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/SetDetectorRotation",
            request,
            SetDetectorRotationResponse,
        )

    async def get_detector_rotation(
        self, *, plane: v1.Plane = 0
    ) -> GetDetectorRotationResponse:
        request = GetDetectorRotationRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetDetectorRotation",
            request,
            GetDetectorRotationResponse,
        )

    async def get_detector_rotation_stream(
        self, *, plane: v1.Plane = 0
    ) -> AsyncGenerator[GetDetectorRotationResponse, None]:
        request = GetDetectorRotationRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetDetectorRotationStream",
            request,
            GetDetectorRotationResponse,
        ):
            yield response

    async def set_zoom(
        self, *, plane: v1.Plane = 0, value: float = 0
    ) -> SetZoomResponse:
        request = SetZoomRequest()
        request.plane = plane
        request.value = value

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/SetZoom",
            request,
            SetZoomResponse,
        )

    async def get_zoom(self, *, plane: v1.Plane = 0) -> GetZoomResponse:
        request = GetZoomRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetZoom",
            request,
            GetZoomResponse,
        )

    async def get_zoom_stream(
        self, *, plane: v1.Plane = 0
    ) -> AsyncGenerator[GetZoomResponse, None]:
        request = GetZoomRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetZoomStream",
            request,
            GetZoomResponse,
        ):
            yield response

    async def set_source_offset(self, *, offset: float = 0) -> SetSourceOffsetResponse:
        request = SetSourceOffsetRequest()
        request.offset = offset

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/SetSourceOffset",
            request,
            SetSourceOffsetResponse,
        )

    async def get_source_offset(self) -> GetSourceOffsetResponse:
        request = GetSourceOffsetRequest()

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetSourceOffset",
            request,
            GetSourceOffsetResponse,
        )

    async def get_source_offset_stream(
        self,
    ) -> AsyncGenerator[GetSourceOffsetResponse, None]:
        request = GetSourceOffsetRequest()

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetSourceOffsetStream",
            request,
            GetSourceOffsetResponse,
        ):
            yield response

    async def set_detector_offset(
        self, *, plane: v1.Plane = 0, offset: float = 0
    ) -> SetDetectorOffsetResponse:
        request = SetDetectorOffsetRequest()
        request.plane = plane
        request.offset = offset

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/SetDetectorOffset",
            request,
            SetDetectorOffsetResponse,
        )

    async def get_detector_offset(
        self, *, plane: v1.Plane = 0
    ) -> GetDetectorOffsetResponse:
        request = GetDetectorOffsetRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetDetectorOffset",
            request,
            GetDetectorOffsetResponse,
        )

    async def get_detector_offset_stream(
        self, *, plane: v1.Plane = 0
    ) -> AsyncGenerator[GetDetectorOffsetResponse, None]:
        request = GetDetectorOffsetRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetDetectorOffsetStream",
            request,
            GetDetectorOffsetResponse,
        ):
            yield response

    async def get_transforms(self, *, plane: v1.Plane = 0) -> GetTransformsResponse:
        request = GetTransformsRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/GetTransforms",
            request,
            GetTransformsResponse,
        )

    async def get_transforms_stream(
        self, *, plane: v1.Plane = 0
    ) -> AsyncGenerator[GetTransformsResponse, None]:
        request = GetTransformsRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice.geometry.v1.Geometry/GetTransformsStream",
            request,
            GetTransformsResponse,
        ):
            yield response

    async def set3d_r_a_trajectory(
        self, *, positions: List["Position3dRA"] = []
    ) -> Set3dRATrajectoryResponse:
        request = Set3dRATrajectoryRequest()
        if positions is not None:
            request.positions = positions

        return await self._unary_unary(
            "/mentice.geometry.v1.Geometry/Set3dRATrajectory",
            request,
            Set3dRATrajectoryResponse,
        )
