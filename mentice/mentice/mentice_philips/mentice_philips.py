# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mentice_philips.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, List, Optional

import betterproto
import grpclib


class Plane(betterproto.Enum):
    UNDEFINED = 0
    MAIN = 1
    LATERAL = 2


class XrayMode(betterproto.Enum):
    MODE_UNDEFINED = 0
    XRAY = 1
    CINE = 2


class ColorType(betterproto.Enum):
    UNDEFINE = 0
    GREY = 1


@dataclass
class GetSystemStateRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)


@dataclass
class GetSystemStateReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    system_state: "SystemState" = betterproto.message_field(2)


@dataclass
class SetXrayPedalRequest(betterproto.Message):
    down: bool = betterproto.bool_field(1)


@dataclass
class SetXrayPedalReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class SetCinePedalRequest(betterproto.Message):
    down: bool = betterproto.bool_field(1)


@dataclass
class SetCinePedalReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class XrayPedalStreamRequest(betterproto.Message):
    pass


@dataclass
class XrayPedalStreamReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    down: bool = betterproto.bool_field(2)


@dataclass
class CinePedalStreamRequest(betterproto.Message):
    pass


@dataclass
class CinePedalStreamReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    down: bool = betterproto.bool_field(2)


@dataclass
class SetShuttersRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)
    shutters: "Shutters" = betterproto.message_field(2)


@dataclass
class SetShuttersReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class SetCollimatorsRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)
    collimators: "Collimators" = betterproto.message_field(2)


@dataclass
class SetCollimatorsReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class XrayStreamRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)


@dataclass
class XrayStreamReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    xray: "ImageData" = betterproto.message_field(2)
    system_state: "SystemState" = betterproto.message_field(3)


@dataclass
class GetRadiationRequest(betterproto.Message):
    pass


@dataclass
class GetRadiationReply(betterproto.Message):
    esd: float = betterproto.float_field(1)
    irp_ak: float = betterproto.float_field(2)
    kap: float = betterproto.float_field(3)
    psd: float = betterproto.float_field(4)
    irp_ak_accum: float = betterproto.float_field(5)
    kap_accum: float = betterproto.float_field(6)


@dataclass
class SetFrameRateRequest(betterproto.Message):
    mode: "XrayMode" = betterproto.enum_field(1)
    framerate: int = betterproto.int32_field(2)


@dataclass
class SetFrameRateReply(betterproto.Message):
    pass


@dataclass
class SetTablePositionRequest(betterproto.Message):
    position: "Pos3f" = betterproto.message_field(1)


@dataclass
class SetTablePositionReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class SetCarmRotationRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)
    angulation: "CarmAngulation" = betterproto.message_field(2)


@dataclass
class SetCarmRotationReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class SetDetectorOffsetRequest(betterproto.Message):
    # moves detector
    plane: "Plane" = betterproto.enum_field(1)
    distance: float = betterproto.float_field(2)


@dataclass
class SetDetectorOffsetReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class SetDetectorRotationRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)
    rotation: float = betterproto.float_field(2)


@dataclass
class SetDetectorRotationReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class GetProductSetRequest(betterproto.Message):
    pass


@dataclass
class GetProductSetReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    products: List["ToolId"] = betterproto.message_field(2)


@dataclass
class SetZoomRequest(betterproto.Message):
    plane: "Plane" = betterproto.enum_field(1)
    value: float = betterproto.float_field(2)


@dataclass
class SetZoomReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class PublishDeviceRequest(betterproto.Message):
    tool_id: "ToolId" = betterproto.message_field(1)


@dataclass
class PublishDeviceReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    unique_id: int = betterproto.int32_field(2)


@dataclass
class GetPublishedDevicesRequest(betterproto.Message):
    pass


@dataclass
class GetPublishedDevicesReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    devices: List["DeviceInfo"] = betterproto.message_field(2)


@dataclass
class DevicePublishedStreamRequest(betterproto.Message):
    pass


@dataclass
class DevicePublishedStreamReply(betterproto.Message):
    device: "DeviceInfo" = betterproto.message_field(1)


@dataclass
class DeviceRemovedStreamRequest(betterproto.Message):
    pass


@dataclass
class DeviceRemovedStreamReply(betterproto.Message):
    device: "DeviceInfo" = betterproto.message_field(1)


@dataclass
class MoveDeviceRequest(betterproto.Message):
    unique_id: int = betterproto.int32_field(1)
    translation: float = betterproto.float_field(2)
    rotation: float = betterproto.float_field(3)
    # use incremental values if true, absolute if false
    use_incremental_translation: bool = betterproto.bool_field(4)
    use_incremental_rotation: bool = betterproto.bool_field(5)
    # if speeds are too high in relation to magnitude of translation/rotation,
    # the simulation will set a speed if speeds are 0, simulation will set the
    # highest suitable speed depending on translation/rotation magnitude
    speed: float = betterproto.float_field(6)
    angular_speed: float = betterproto.float_field(7)


@dataclass
class MoveDeviceReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class SetContrastFlowRequest(betterproto.Message):
    unique_id: int = betterproto.int32_field(1)
    flow: float = betterproto.float_field(2)


@dataclass
class SetContrastFlowReply(betterproto.Message):
    pass


@dataclass
class ContrastFlowStreamRequest(betterproto.Message):
    unique_id: int = betterproto.int32_field(1)


@dataclass
class ContrastFlowStreamReply(betterproto.Message):
    flow: float = betterproto.float_field(1)


@dataclass
class SetBalloonPressureRequest(betterproto.Message):
    unique_id: int = betterproto.int32_field(1)
    pressure: float = betterproto.float_field(2)


@dataclass
class SetBalloonPressureReply(betterproto.Message):
    pass


@dataclass
class GetBalloonPressureRequest(betterproto.Message):
    unique_id: int = betterproto.int32_field(1)


@dataclass
class GetBalloonPressureReply(betterproto.Message):
    pressure: float = betterproto.float_field(1)


@dataclass
class LoadStateRequest(betterproto.Message):
    tag: str = betterproto.string_field(1)


@dataclass
class LoadStateReply(betterproto.Message):
    pass


@dataclass
class SaveStateRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass
class SaveStateReply(betterproto.Message):
    pass


@dataclass
class GetSavedStatesRequest(betterproto.Message):
    pass


@dataclass
class GetSavedStatesReply(betterproto.Message):
    states: List["StateInfo"] = betterproto.message_field(1)


@dataclass
class ListCasesRequest(betterproto.Message):
    vist_packages_path: str = betterproto.string_field(1)


@dataclass
class ListCasesReply(betterproto.Message):
    cases: List["CaseInfo"] = betterproto.message_field(1)


@dataclass
class StartCaseRequest(betterproto.Message):
    case_info: "CaseInfo" = betterproto.message_field(1)


@dataclass
class StartCaseReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class ExitVistRequest(betterproto.Message):
    pass


@dataclass
class ExitVistReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class KillVistRequest(betterproto.Message):
    pass


@dataclass
class KillVistReply(betterproto.Message):
    status: "Status" = betterproto.message_field(1)


@dataclass
class Status(betterproto.Message):
    code: int = betterproto.int32_field(1)
    message: str = betterproto.string_field(2)


@dataclass
class XraySettings(betterproto.Message):
    xray: "XrayModeSettings" = betterproto.message_field(1)
    cine: "XrayModeSettings" = betterproto.message_field(2)


@dataclass
class XrayModeSettings(betterproto.Message):
    framerate: int = betterproto.int32_field(1)


@dataclass
class ImageData(betterproto.Message):
    time_stamp: int = betterproto.uint64_field(1)
    frame_number: int = betterproto.uint32_field(2)
    image: "Image" = betterproto.message_field(3)
    valid_rectangle: "RectUint32" = betterproto.message_field(4)
    mode: "XrayMode" = betterproto.enum_field(5)


@dataclass
class Image(betterproto.Message):
    width: int = betterproto.uint32_field(1)
    height: int = betterproto.uint32_field(2)
    bit_depth: int = betterproto.uint32_field(3)
    color_type: "ColorType" = betterproto.enum_field(4)
    pixels: bytes = betterproto.bytes_field(5)


@dataclass
class RectUint32(betterproto.Message):
    top: int = betterproto.uint32_field(1)
    bottom: int = betterproto.uint32_field(2)
    left: int = betterproto.uint32_field(3)
    right: int = betterproto.uint32_field(4)


@dataclass
class Shutters(betterproto.Message):
    # range [0(open), 1(closed)]
    horizontal: float = betterproto.float_field(1)
    vertical: float = betterproto.float_field(2)


@dataclass
class Collimators(betterproto.Message):
    left: "CollimatorsCollimator" = betterproto.message_field(1)
    right: "CollimatorsCollimator" = betterproto.message_field(2)


@dataclass
class CollimatorsCollimator(betterproto.Message):
    translation: float = betterproto.float_field(1)
    rotation: float = betterproto.float_field(2)


@dataclass
class SystemState(betterproto.Message):
    target_fps: float = betterproto.float_field(1)
    # same as XrayModeSettings::framerate for current mode (xray/cine)
    shutters: "Shutters" = betterproto.message_field(2)
    collimators: "Collimators" = betterproto.message_field(3)
    geometry: "Geometry" = betterproto.message_field(4)
    devices: List["DeviceState"] = betterproto.message_field(5)
    xray_settings: "XraySettings" = betterproto.message_field(6)
    time_stamp: int = betterproto.uint64_field(7)
    device_components: List["Component"] = betterproto.message_field(8)


@dataclass
class ToolId(betterproto.Message):
    manufacturer: str = betterproto.string_field(1)
    product: str = betterproto.string_field(2)
    id: str = betterproto.string_field(3)
    type: str = betterproto.string_field(4)


@dataclass
class ProductSet(betterproto.Message):
    products: List["ToolId"] = betterproto.message_field(1)


@dataclass
class DeviceInfo(betterproto.Message):
    unique_id: int = betterproto.int32_field(1)
    tool_id: "ToolId" = betterproto.message_field(2)
    can_inject_contrast: bool = betterproto.bool_field(3)


@dataclass
class DeviceState(betterproto.Message):
    unique_id: int = betterproto.int32_field(1)
    translation: float = betterproto.float_field(2)
    rotation: float = betterproto.float_field(3)
    shape: "DeviceShape" = betterproto.message_field(4)
    velocity: float = betterproto.float_field(5)
    angular_velocity: float = betterproto.float_field(6)


@dataclass
class DeviceShape(betterproto.Message):
    points: List["DeviceControlPoint"] = betterproto.message_field(1)


@dataclass
class DeviceControlPoint(betterproto.Message):
    position: "Pos3f" = betterproto.message_field(1)
    rel_position: float = betterproto.float_field(2)
    radius: float = betterproto.float_field(3)


@dataclass
class Component(betterproto.Message):
    # Connected components has the same tool_id and unique_id
    unique_id: int = betterproto.int32_field(1)
    tool_id: "ToolId" = betterproto.message_field(2)
    portal_id: str = betterproto.string_field(3)
    name: str = betterproto.string_field(4)
    shape: "DeviceShape" = betterproto.message_field(5)


@dataclass
class Geometry(betterproto.Message):
    table_pos: "Pos3f" = betterproto.message_field(1)
    carm: "Carm" = betterproto.message_field(2)
    transforms: "Transforms" = betterproto.message_field(3)


@dataclass
class Carm(betterproto.Message):
    angulation: "CarmAngulation" = betterproto.message_field(1)
    source_offset: float = betterproto.float_field(2)
    detector_offset: float = betterproto.float_field(3)
    detector_rotation: float = betterproto.float_field(4)
    zoom: float = betterproto.float_field(5)


@dataclass
class CarmAngulation(betterproto.Message):
    # rotation directions and axes defined from initial state
    cranial: float = betterproto.float_field(1)
    anterior: float = betterproto.float_field(2)
    vertical_axis: float = betterproto.float_field(3)


@dataclass
class Transforms(betterproto.Message):
    table: "Mat4x4f" = betterproto.message_field(1)
    model_view: "Mat4x4f" = betterproto.message_field(2)
    projection: "Mat4x4f" = betterproto.message_field(3)


@dataclass
class Mat4x4f(betterproto.Message):
    values: List[float] = betterproto.float_field(1)


@dataclass
class Pos3f(betterproto.Message):
    """
    GLOBAL_COORDINATE_SYSTEM:      origo: isocentre (rotational center) of
    C-arms      [x, y, z]: positive in directions [patient_left, cranial,
    ventral] PATIENTFIX_COORDINATE_SYSTEM:      origo: patient fix, usually
    close to heart      [x, y, z]: positive in directions [patient_left,
    cranial, ventral] OPENGL_PIXELSPACE:      if pd=projection_distortion
    bottom right is (-pd,-pd) top left is (pd,pd)      origo: middle of screen
    [x, y, z]: positive in directions [image left, image up, camera direction]
    """

    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass
class CaseInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    package_id: str = betterproto.string_field(3)
    package_name: str = betterproto.string_field(4)
    package_path: str = betterproto.string_field(5)


@dataclass
class StateInfo(betterproto.Message):
    tag: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)


class APIStub(betterproto.ServiceStub):
    async def get_system_state(self, *, plane: Plane = 0) -> GetSystemStateReply:
        request = GetSystemStateRequest()
        request.plane = plane

        return await self._unary_unary(
            "/mentice_philips.API/GetSystemState",
            request,
            GetSystemStateReply,
        )

    async def set_xray_pedal(self, *, down: bool = False) -> SetXrayPedalReply:
        """Xray rpcs"""

        request = SetXrayPedalRequest()
        request.down = down

        return await self._unary_unary(
            "/mentice_philips.API/SetXrayPedal",
            request,
            SetXrayPedalReply,
        )

    async def set_cine_pedal(self, *, down: bool = False) -> SetCinePedalReply:
        request = SetCinePedalRequest()
        request.down = down

        return await self._unary_unary(
            "/mentice_philips.API/SetCinePedal",
            request,
            SetCinePedalReply,
        )

    async def xray_pedal_stream(self) -> AsyncGenerator[XrayPedalStreamReply, None]:
        request = XrayPedalStreamRequest()

        async for response in self._unary_stream(
            "/mentice_philips.API/XrayPedalStream",
            request,
            XrayPedalStreamReply,
        ):
            yield response

    async def cine_pedal_stream(self) -> AsyncGenerator[CinePedalStreamReply, None]:
        request = CinePedalStreamRequest()

        async for response in self._unary_stream(
            "/mentice_philips.API/CinePedalStream",
            request,
            CinePedalStreamReply,
        ):
            yield response

    async def set_shutters(
        self, *, plane: "Plane" = 0, shutters: Optional["Shutters"] = None
    ) -> SetShuttersReply:
        request = SetShuttersRequest()
        request.plane = plane
        if shutters is not None:
            request.shutters = shutters

        return await self._unary_unary(
            "/mentice_philips.API/SetShutters",
            request,
            SetShuttersReply,
        )

    async def set_collimators(
        self, *, plane: "Plane" = 0, collimators: Optional["Collimators"] = None
    ) -> SetCollimatorsReply:
        request = SetCollimatorsRequest()
        request.plane = plane
        if collimators is not None:
            request.collimators = collimators

        return await self._unary_unary(
            "/mentice_philips.API/SetCollimators",
            request,
            SetCollimatorsReply,
        )

    async def xray_stream(
        self, *, plane: "Plane" = 0
    ) -> AsyncGenerator[XrayStreamReply, None]:
        request = XrayStreamRequest()
        request.plane = plane

        async for response in self._unary_stream(
            "/mentice_philips.API/XrayStream",
            request,
            XrayStreamReply,
        ):
            yield response

    async def get_radiation(self) -> GetRadiationReply:
        request = GetRadiationRequest()

        return await self._unary_unary(
            "/mentice_philips.API/GetRadiation",
            request,
            GetRadiationReply,
        )

    async def get_radiation_stream(self) -> AsyncGenerator[GetRadiationReply, None]:
        request = GetRadiationRequest()

        async for response in self._unary_stream(
            "/mentice_philips.API/GetRadiationStream",
            request,
            GetRadiationReply,
        ):
            yield response

    async def set_frame_rate(
        self, *, mode: "XrayMode" = 0, framerate: int = 0
    ) -> SetFrameRateReply:
        request = SetFrameRateRequest()
        request.mode = mode
        request.framerate = framerate

        return await self._unary_unary(
            "/mentice_philips.API/SetFrameRate",
            request,
            SetFrameRateReply,
        )

    async def set_table_position(
        self, *, position: Optional["Pos3f"] = None
    ) -> SetTablePositionReply:
        """Geometry rpcs"""

        request = SetTablePositionRequest()
        if position is not None:
            request.position = position

        return await self._unary_unary(
            "/mentice_philips.API/SetTablePosition",
            request,
            SetTablePositionReply,
        )

    async def set_carm_rotation(
        self, *, plane: "Plane" = 0, angulation: Optional["CarmAngulation"] = None
    ) -> SetCarmRotationReply:
        request = SetCarmRotationRequest()
        request.plane = plane
        if angulation is not None:
            request.angulation = angulation

        return await self._unary_unary(
            "/mentice_philips.API/SetCarmRotation",
            request,
            SetCarmRotationReply,
        )

    async def set_detector_offset(
        self, *, plane: "Plane" = 0, distance: float = 0
    ) -> SetDetectorOffsetReply:
        request = SetDetectorOffsetRequest()
        request.plane = plane
        request.distance = distance

        return await self._unary_unary(
            "/mentice_philips.API/SetDetectorOffset",
            request,
            SetDetectorOffsetReply,
        )

    async def set_detector_rotation(
        self, *, plane: "Plane" = 0, rotation: float = 0
    ) -> SetDetectorRotationReply:
        request = SetDetectorRotationRequest()
        request.plane = plane
        request.rotation = rotation

        return await self._unary_unary(
            "/mentice_philips.API/SetDetectorRotation",
            request,
            SetDetectorRotationReply,
        )

    async def set_zoom(self, *, plane: "Plane" = 0, value: float = 0) -> SetZoomReply:
        request = SetZoomRequest()
        request.plane = plane
        request.value = value

        return await self._unary_unary(
            "/mentice_philips.API/SetZoom",
            request,
            SetZoomReply,
        )

    async def get_product_set(self) -> GetProductSetReply:
        """Device rpcs"""

        request = GetProductSetRequest()

        return await self._unary_unary(
            "/mentice_philips.API/GetProductSet",
            request,
            GetProductSetReply,
        )

    async def publish_device(
        self, *, tool_id: Optional["ToolId"] = None
    ) -> PublishDeviceReply:
        request = PublishDeviceRequest()
        if tool_id is not None:
            request.tool_id = tool_id

        return await self._unary_unary(
            "/mentice_philips.API/PublishDevice",
            request,
            PublishDeviceReply,
        )

    async def get_published_devices(self) -> GetPublishedDevicesReply:
        request = GetPublishedDevicesRequest()

        return await self._unary_unary(
            "/mentice_philips.API/GetPublishedDevices",
            request,
            GetPublishedDevicesReply,
        )

    async def device_published_stream(
        self,
    ) -> AsyncGenerator[DevicePublishedStreamReply, None]:
        request = DevicePublishedStreamRequest()

        async for response in self._unary_stream(
            "/mentice_philips.API/DevicePublishedStream",
            request,
            DevicePublishedStreamReply,
        ):
            yield response

    async def device_removed_stream(
        self,
    ) -> AsyncGenerator[DeviceRemovedStreamReply, None]:
        request = DeviceRemovedStreamRequest()

        async for response in self._unary_stream(
            "/mentice_philips.API/DeviceRemovedStream",
            request,
            DeviceRemovedStreamReply,
        ):
            yield response

    async def move_device(
        self,
        *,
        unique_id: int = 0,
        translation: float = 0,
        rotation: float = 0,
        use_incremental_translation: bool = False,
        use_incremental_rotation: bool = False,
        speed: float = 0,
        angular_speed: float = 0,
    ) -> MoveDeviceReply:
        request = MoveDeviceRequest()
        request.unique_id = unique_id
        request.translation = translation
        request.rotation = rotation
        request.use_incremental_translation = use_incremental_translation
        request.use_incremental_rotation = use_incremental_rotation
        request.speed = speed
        request.angular_speed = angular_speed

        return await self._unary_unary(
            "/mentice_philips.API/MoveDevice",
            request,
            MoveDeviceReply,
        )

    async def set_contrast_flow(
        self, *, unique_id: int = 0, flow: float = 0
    ) -> SetContrastFlowReply:
        request = SetContrastFlowRequest()
        request.unique_id = unique_id
        request.flow = flow

        return await self._unary_unary(
            "/mentice_philips.API/SetContrastFlow",
            request,
            SetContrastFlowReply,
        )

    async def contrast_flow_stream(
        self, *, unique_id: int = 0
    ) -> AsyncGenerator[ContrastFlowStreamReply, None]:
        request = ContrastFlowStreamRequest()
        request.unique_id = unique_id

        async for response in self._unary_stream(
            "/mentice_philips.API/ContrastFlowStream",
            request,
            ContrastFlowStreamReply,
        ):
            yield response

    async def set_balloon_pressure(
        self, *, unique_id: int = 0, pressure: float = 0
    ) -> SetBalloonPressureReply:
        request = SetBalloonPressureRequest()
        request.unique_id = unique_id
        request.pressure = pressure

        return await self._unary_unary(
            "/mentice_philips.API/SetBalloonPressure",
            request,
            SetBalloonPressureReply,
        )

    async def get_balloon_pressure(
        self, *, unique_id: int = 0
    ) -> GetBalloonPressureReply:
        request = GetBalloonPressureRequest()
        request.unique_id = unique_id

        return await self._unary_unary(
            "/mentice_philips.API/GetBalloonPressure",
            request,
            GetBalloonPressureReply,
        )

    async def get_balloon_pressure_stream(
        self, *, unique_id: int = 0
    ) -> AsyncGenerator[GetBalloonPressureReply, None]:
        request = GetBalloonPressureRequest()
        request.unique_id = unique_id

        async for response in self._unary_stream(
            "/mentice_philips.API/GetBalloonPressureStream",
            request,
            GetBalloonPressureReply,
        ):
            yield response

    async def load_state(self, *, tag: str = "") -> LoadStateReply:
        request = LoadStateRequest()
        request.tag = tag

        return await self._unary_unary(
            "/mentice_philips.API/LoadState",
            request,
            LoadStateReply,
        )

    async def save_state(self, *, name: str = "") -> SaveStateReply:
        request = SaveStateRequest()
        request.name = name

        return await self._unary_unary(
            "/mentice_philips.API/SaveState",
            request,
            SaveStateReply,
        )

    async def get_saved_states(self) -> GetSavedStatesReply:
        request = GetSavedStatesRequest()

        return await self._unary_unary(
            "/mentice_philips.API/GetSavedStates",
            request,
            GetSavedStatesReply,
        )

    async def list_cases(self, *, vist_packages_path: str = "") -> ListCasesReply:
        """Vist Process rpcs"""

        request = ListCasesRequest()
        request.vist_packages_path = vist_packages_path

        return await self._unary_unary(
            "/mentice_philips.API/ListCases",
            request,
            ListCasesReply,
        )

    async def start_case(
        self, *, case_info: Optional["CaseInfo"] = None
    ) -> StartCaseReply:
        request = StartCaseRequest()
        if case_info is not None:
            request.case_info = case_info

        return await self._unary_unary(
            "/mentice_philips.API/StartCase",
            request,
            StartCaseReply,
        )

    async def exit_vist(self) -> ExitVistReply:
        request = ExitVistRequest()

        return await self._unary_unary(
            "/mentice_philips.API/ExitVist",
            request,
            ExitVistReply,
        )

    async def kill_vist(self) -> KillVistReply:
        request = KillVistRequest()

        return await self._unary_unary(
            "/mentice_philips.API/KillVist",
            request,
            KillVistReply,
        )
