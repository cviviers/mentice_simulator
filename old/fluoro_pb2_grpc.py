# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import fluoro_pb2 as fluoro__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fluoro_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FluoroStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFrameStream = channel.unary_stream(
                '/mentice.fluoro.v1.Fluoro/GetFrameStream',
                request_serializer=fluoro__pb2.GetFrameStreamRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetFrameStreamResponse.FromString,
                _registered_method=True)
        self.SetXrayPedal = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/SetXrayPedal',
                request_serializer=fluoro__pb2.SetXrayPedalRequest.SerializeToString,
                response_deserializer=fluoro__pb2.SetXrayPedalResponse.FromString,
                _registered_method=True)
        self.GetXrayPedal = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/GetXrayPedal',
                request_serializer=fluoro__pb2.GetXrayPedalRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetXrayPedalResponse.FromString,
                _registered_method=True)
        self.GetXrayPedalStream = channel.unary_stream(
                '/mentice.fluoro.v1.Fluoro/GetXrayPedalStream',
                request_serializer=fluoro__pb2.GetXrayPedalRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetXrayPedalResponse.FromString,
                _registered_method=True)
        self.SetCinePedal = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/SetCinePedal',
                request_serializer=fluoro__pb2.SetCinePedalRequest.SerializeToString,
                response_deserializer=fluoro__pb2.SetCinePedalResponse.FromString,
                _registered_method=True)
        self.GetCinePedal = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/GetCinePedal',
                request_serializer=fluoro__pb2.GetCinePedalRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetCinePedalResponse.FromString,
                _registered_method=True)
        self.GetCinePedalStream = channel.unary_stream(
                '/mentice.fluoro.v1.Fluoro/GetCinePedalStream',
                request_serializer=fluoro__pb2.GetCinePedalRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetCinePedalResponse.FromString,
                _registered_method=True)
        self.SetShutters = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/SetShutters',
                request_serializer=fluoro__pb2.SetShuttersRequest.SerializeToString,
                response_deserializer=fluoro__pb2.SetShuttersResponse.FromString,
                _registered_method=True)
        self.GetShutters = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/GetShutters',
                request_serializer=fluoro__pb2.GetShuttersRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetShuttersResponse.FromString,
                _registered_method=True)
        self.GetShuttersStream = channel.unary_stream(
                '/mentice.fluoro.v1.Fluoro/GetShuttersStream',
                request_serializer=fluoro__pb2.GetShuttersRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetShuttersResponse.FromString,
                _registered_method=True)
        self.SetCollimators = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/SetCollimators',
                request_serializer=fluoro__pb2.SetCollimatorsRequest.SerializeToString,
                response_deserializer=fluoro__pb2.SetCollimatorsResponse.FromString,
                _registered_method=True)
        self.GetCollimators = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/GetCollimators',
                request_serializer=fluoro__pb2.GetCollimatorsRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetCollimatorsResponse.FromString,
                _registered_method=True)
        self.GetCollimatorsStream = channel.unary_stream(
                '/mentice.fluoro.v1.Fluoro/GetCollimatorsStream',
                request_serializer=fluoro__pb2.GetCollimatorsRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetCollimatorsResponse.FromString,
                _registered_method=True)
        self.SetFrameRate = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/SetFrameRate',
                request_serializer=fluoro__pb2.SetFrameRateRequest.SerializeToString,
                response_deserializer=fluoro__pb2.SetFrameRateResponse.FromString,
                _registered_method=True)
        self.GetFrameRate = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/GetFrameRate',
                request_serializer=fluoro__pb2.GetFrameRateRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetFrameRateResponse.FromString,
                _registered_method=True)
        self.GetFrameRateStream = channel.unary_stream(
                '/mentice.fluoro.v1.Fluoro/GetFrameRateStream',
                request_serializer=fluoro__pb2.GetFrameRateRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetFrameRateResponse.FromString,
                _registered_method=True)
        self.GetRadiation = channel.unary_unary(
                '/mentice.fluoro.v1.Fluoro/GetRadiation',
                request_serializer=fluoro__pb2.GetRadiationRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetRadiationResponse.FromString,
                _registered_method=True)
        self.GetRadiationStream = channel.unary_stream(
                '/mentice.fluoro.v1.Fluoro/GetRadiationStream',
                request_serializer=fluoro__pb2.GetRadiationRequest.SerializeToString,
                response_deserializer=fluoro__pb2.GetRadiationResponse.FromString,
                _registered_method=True)


class FluoroServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFrameStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetXrayPedal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetXrayPedal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetXrayPedalStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCinePedal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCinePedal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCinePedalStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetShutters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShutters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShuttersStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCollimators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollimators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollimatorsStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFrameRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFrameRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFrameRateStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRadiation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRadiationStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FluoroServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFrameStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFrameStream,
                    request_deserializer=fluoro__pb2.GetFrameStreamRequest.FromString,
                    response_serializer=fluoro__pb2.GetFrameStreamResponse.SerializeToString,
            ),
            'SetXrayPedal': grpc.unary_unary_rpc_method_handler(
                    servicer.SetXrayPedal,
                    request_deserializer=fluoro__pb2.SetXrayPedalRequest.FromString,
                    response_serializer=fluoro__pb2.SetXrayPedalResponse.SerializeToString,
            ),
            'GetXrayPedal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetXrayPedal,
                    request_deserializer=fluoro__pb2.GetXrayPedalRequest.FromString,
                    response_serializer=fluoro__pb2.GetXrayPedalResponse.SerializeToString,
            ),
            'GetXrayPedalStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetXrayPedalStream,
                    request_deserializer=fluoro__pb2.GetXrayPedalRequest.FromString,
                    response_serializer=fluoro__pb2.GetXrayPedalResponse.SerializeToString,
            ),
            'SetCinePedal': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCinePedal,
                    request_deserializer=fluoro__pb2.SetCinePedalRequest.FromString,
                    response_serializer=fluoro__pb2.SetCinePedalResponse.SerializeToString,
            ),
            'GetCinePedal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCinePedal,
                    request_deserializer=fluoro__pb2.GetCinePedalRequest.FromString,
                    response_serializer=fluoro__pb2.GetCinePedalResponse.SerializeToString,
            ),
            'GetCinePedalStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCinePedalStream,
                    request_deserializer=fluoro__pb2.GetCinePedalRequest.FromString,
                    response_serializer=fluoro__pb2.GetCinePedalResponse.SerializeToString,
            ),
            'SetShutters': grpc.unary_unary_rpc_method_handler(
                    servicer.SetShutters,
                    request_deserializer=fluoro__pb2.SetShuttersRequest.FromString,
                    response_serializer=fluoro__pb2.SetShuttersResponse.SerializeToString,
            ),
            'GetShutters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShutters,
                    request_deserializer=fluoro__pb2.GetShuttersRequest.FromString,
                    response_serializer=fluoro__pb2.GetShuttersResponse.SerializeToString,
            ),
            'GetShuttersStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetShuttersStream,
                    request_deserializer=fluoro__pb2.GetShuttersRequest.FromString,
                    response_serializer=fluoro__pb2.GetShuttersResponse.SerializeToString,
            ),
            'SetCollimators': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCollimators,
                    request_deserializer=fluoro__pb2.SetCollimatorsRequest.FromString,
                    response_serializer=fluoro__pb2.SetCollimatorsResponse.SerializeToString,
            ),
            'GetCollimators': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollimators,
                    request_deserializer=fluoro__pb2.GetCollimatorsRequest.FromString,
                    response_serializer=fluoro__pb2.GetCollimatorsResponse.SerializeToString,
            ),
            'GetCollimatorsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCollimatorsStream,
                    request_deserializer=fluoro__pb2.GetCollimatorsRequest.FromString,
                    response_serializer=fluoro__pb2.GetCollimatorsResponse.SerializeToString,
            ),
            'SetFrameRate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFrameRate,
                    request_deserializer=fluoro__pb2.SetFrameRateRequest.FromString,
                    response_serializer=fluoro__pb2.SetFrameRateResponse.SerializeToString,
            ),
            'GetFrameRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFrameRate,
                    request_deserializer=fluoro__pb2.GetFrameRateRequest.FromString,
                    response_serializer=fluoro__pb2.GetFrameRateResponse.SerializeToString,
            ),
            'GetFrameRateStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFrameRateStream,
                    request_deserializer=fluoro__pb2.GetFrameRateRequest.FromString,
                    response_serializer=fluoro__pb2.GetFrameRateResponse.SerializeToString,
            ),
            'GetRadiation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRadiation,
                    request_deserializer=fluoro__pb2.GetRadiationRequest.FromString,
                    response_serializer=fluoro__pb2.GetRadiationResponse.SerializeToString,
            ),
            'GetRadiationStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRadiationStream,
                    request_deserializer=fluoro__pb2.GetRadiationRequest.FromString,
                    response_serializer=fluoro__pb2.GetRadiationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mentice.fluoro.v1.Fluoro', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mentice.fluoro.v1.Fluoro', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Fluoro(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFrameStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetFrameStream',
            fluoro__pb2.GetFrameStreamRequest.SerializeToString,
            fluoro__pb2.GetFrameStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetXrayPedal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/SetXrayPedal',
            fluoro__pb2.SetXrayPedalRequest.SerializeToString,
            fluoro__pb2.SetXrayPedalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetXrayPedal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetXrayPedal',
            fluoro__pb2.GetXrayPedalRequest.SerializeToString,
            fluoro__pb2.GetXrayPedalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetXrayPedalStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetXrayPedalStream',
            fluoro__pb2.GetXrayPedalRequest.SerializeToString,
            fluoro__pb2.GetXrayPedalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCinePedal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/SetCinePedal',
            fluoro__pb2.SetCinePedalRequest.SerializeToString,
            fluoro__pb2.SetCinePedalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCinePedal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetCinePedal',
            fluoro__pb2.GetCinePedalRequest.SerializeToString,
            fluoro__pb2.GetCinePedalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCinePedalStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetCinePedalStream',
            fluoro__pb2.GetCinePedalRequest.SerializeToString,
            fluoro__pb2.GetCinePedalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetShutters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/SetShutters',
            fluoro__pb2.SetShuttersRequest.SerializeToString,
            fluoro__pb2.SetShuttersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetShutters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetShutters',
            fluoro__pb2.GetShuttersRequest.SerializeToString,
            fluoro__pb2.GetShuttersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetShuttersStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetShuttersStream',
            fluoro__pb2.GetShuttersRequest.SerializeToString,
            fluoro__pb2.GetShuttersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCollimators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/SetCollimators',
            fluoro__pb2.SetCollimatorsRequest.SerializeToString,
            fluoro__pb2.SetCollimatorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollimators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetCollimators',
            fluoro__pb2.GetCollimatorsRequest.SerializeToString,
            fluoro__pb2.GetCollimatorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollimatorsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetCollimatorsStream',
            fluoro__pb2.GetCollimatorsRequest.SerializeToString,
            fluoro__pb2.GetCollimatorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFrameRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/SetFrameRate',
            fluoro__pb2.SetFrameRateRequest.SerializeToString,
            fluoro__pb2.SetFrameRateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFrameRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetFrameRate',
            fluoro__pb2.GetFrameRateRequest.SerializeToString,
            fluoro__pb2.GetFrameRateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFrameRateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetFrameRateStream',
            fluoro__pb2.GetFrameRateRequest.SerializeToString,
            fluoro__pb2.GetFrameRateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRadiation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetRadiation',
            fluoro__pb2.GetRadiationRequest.SerializeToString,
            fluoro__pb2.GetRadiationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRadiationStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mentice.fluoro.v1.Fluoro/GetRadiationStream',
            fluoro__pb2.GetRadiationRequest.SerializeToString,
            fluoro__pb2.GetRadiationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
